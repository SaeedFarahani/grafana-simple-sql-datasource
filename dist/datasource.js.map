{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","m","exec","split","connection","name","q","rqtype","data","body","options","query","buildQueryParameters","targets","length","when","datasourceRequest","buildRequest","method","headers","then","status","message","title","catch","result","annotationQuery","assignIn","annotation","replace","opsAsString","target","interpolated","mapToTextValue","map","d","i","text","value","isObject","filter","hide"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAAjB,IAAwB,EAAnC;AACA,cAAIC,IAAI,YAAYC,IAAZ,CAAiB,KAAKF,GAAL,CAASG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAjB,CAAR;AACA,eAAKC,UAAL,GAAkBH,IAAIA,EAAE,CAAF,CAAJ,GAAU,IAA5B;AACA,eAAKI,IAAL,GAAYV,iBAAiBU,IAA7B;AACA,eAAKC,CAAL,GAASV,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;uCAEYS,M,EAAQC,I,EAAK;AACxB,mBAAO;AACLT,oBAAMQ,MADD;AAELE,oBAAMD,IAFD;AAGLR,mBAAK,KAAKI;AAHL,aAAP;AAKD;;;gCAEKM,O,EAAS;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;;AAEA,gBAAIC,MAAME,OAAN,CAAcC,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKR,CAAL,CAAOS,IAAP,CAAY,EAACP,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,mBAAO,KAAKX,UAAL,CAAgBmB,iBAAhB,CAAkC;AACvChB,mBAAK,KAAKA,GAD6B;AAEvCQ,oBAAM,KAAKS,YAAL,CAAkB,OAAlB,EAA2BN,KAA3B,CAFiC;AAGvCO,sBAAQ,MAH+B;AAIvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,aAAlC,CAAP;AAMD;;;2CAEgB;AACf,mBAAO,KAAKtB,UAAL,CAAgBmB,iBAAhB,CAAkC;AACvChB,mBAAK,KAAKA,GAD6B;AAEvCkB,sBAAQ,MAF+B;AAGvCV,oBAAM,KAAKS,YAAL,CAAkB,MAAlB,EAA0B,IAA1B;AAHiC,aAAlC,EAIJG,IAJI,CAIC,kBAAU;AAChB,qBAAO,EAAEC,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD,aANM,EAMJC,KANI,CAME,kBAAU;AACjB,qBAAO,EAAEH,QAAQ,OAAV,EAAmBC,SAASG,MAA5B,EAAoCF,OAAO,OAA3C,EAAP;AACD,aARM,CAAP;AASD;;;0CAEeb,O,EAAS;AACvB,gBAAIgB,kBAAkBjC,EAAEkC,QAAF,CAAW,EAAX,EAAejB,OAAf,CAAtB;AACAgB,4BAAgBE,UAAhB,CAA2BjB,KAA3B,GAAmC,KAAKb,WAAL,CAAiB+B,OAAjB,CAAyBnB,QAAQkB,UAAR,CAAmBjB,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAnC;;AAEA,mBAAO,KAAKd,UAAL,CAAgBmB,iBAAhB,CAAkC;AACvChB,mBAAK,KAAKA,GAD6B;AAEvCkB,sBAAQ,MAF+B;AAGvCV,oBAAM,KAAKS,YAAL,CAAkB,aAAlB,EAAiCS,eAAjC;AAHiC,aAAlC,EAIJN,IAJI,CAIC,kBAAU;AAChB,qBAAOK,OAAOjB,IAAd;AACD,aANM,CAAP;AAOD;;;0CAEeE,O,EAAS;AACvB,gBAAIoB,cAAc,OAAQpB,OAAR,KAAqB,QAAvC;AACA,gBAAGA,WAAWA,QAAQX,IAAR,IAAgB,KAA9B;AACE;AACA,qBAAO,KAAKO,CAAL,CAAOS,IAAP,CAAY,EAAZ,CAAP;AACF,gBAAIgB,SAASD,cAAcpB,OAAd,GAAwBA,QAAQqB,MAA7C;AACA,gBAAIC,eAAe;AACfD,sBAAQ,KAAKjC,WAAL,CAAiB+B,OAAjB,CAAyBE,MAAzB,EAAiC,IAAjC,EAAuC,OAAvC;AADO,aAAnB;;AAIA,mBAAO,KAAKlC,UAAL,CAAgBmB,iBAAhB,CAAkC;AACvChB,mBAAK,KAAKA,GAD6B;AAEvCQ,oBAAM,KAAKS,YAAL,CAAkB,QAAlB,EAA4Be,YAA5B,CAFiC;AAGvCd,sBAAQ,MAH+B;AAIvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAJ8B,aAAlC,EAKJC,IALI,CAKC,KAAKa,cALN,CAAP;AAMD;;;yCAEcR,M,EAAQ;AACrB,mBAAOhC,EAAEyC,GAAF,CAAMT,OAAOjB,IAAb,EAAmB,UAAC2B,CAAD,EAAIC,CAAJ,EAAU;AAClC,kBAAID,KAAKA,EAAEE,IAAP,IAAeF,EAAEG,KAArB,EAA4B;AAC1B,uBAAO,EAAED,MAAMF,EAAEE,IAAV,EAAgBC,OAAOH,EAAEG,KAAzB,EAAP;AACD,eAFD,MAEO,IAAI7C,EAAE8C,QAAF,CAAWJ,CAAX,CAAJ,EAAmB;AACxB,uBAAO,EAAEE,MAAMF,CAAR,EAAWG,OAAOF,CAAlB,EAAP;AACD;AACD,qBAAO,EAAEC,MAAMF,CAAR,EAAWG,OAAOH,CAAlB,EAAP;AACD,aAPM,CAAP;AAQD;;;+CAEoBzB,O,EAAS;AAAA;;AAC5B;AACA,gBAAIG,UAAUpB,EAAE+C,MAAF,CAAS9B,QAAQG,OAAjB,EAA0B;AAAA,qBACtCkB,OAAOA,MAAP,KAAkB,eAAlB,IAAqC,CAACA,OAAOU,IADP;AAAA,aAA1B,CAAd;;AAGA5B,sBAAUpB,EAAEyC,GAAF,CAAMrB,OAAN,EAAe;AAAA,qBACvBpB,EAAEkC,QAAF,CAAWI,MAAX,EAAmB,EAAEA,QAAQ,MAAKjC,WAAL,CAAiB+B,OAAjB,CAAyBE,OAAOA,MAAhC,CAAV,EAAnB,CADuB;AAAA,aAAf,CAAV;;AAGArB,oBAAQG,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOH,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url || \"\";\r\n    var m = /con\\=(.*)/.exec(this.url.split(\"?\")[1]);\r\n    this.connection = m ? m[1]: null;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n  }\r\n\r\n  buildRequest(rqtype, data){\r\n    return { \r\n      type: rqtype,\r\n      body: data,\r\n      url: this.connection \r\n    };\r\n  }\r\n\r\n  query(options) {\r\n    var query = this.buildQueryParameters(options);\r\n    \r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({data: []});\r\n    }\r\n\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url,\r\n      data: this.buildRequest(\"query\", query ),\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url,\r\n      method: 'POST',\r\n      data: this.buildRequest(\"test\", null)\r\n    }).then(result => {\r\n      return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n    }).catch(result => {\r\n      return { status: \"error\", message: result, title: \"Error\" };\r\n    });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    var annotationQuery = _.assignIn({}, options);\r\n    annotationQuery.annotation.query = this.templateSrv.replace(options.annotation.query, {}, 'glob'); \r\n    \r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url,\r\n      method: 'POST',\r\n      data: this.buildRequest(\"annotations\", annotationQuery)\r\n    }).then(result => {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  metricFindQuery(options) {\r\n    var opsAsString = typeof (options) === \"string\";\r\n    if(options && options.type == 'sql')\r\n      // TODO: Parser?\r\n      return this.q.when([]);\r\n    var target = opsAsString ? options : options.target;\r\n    var interpolated = {\r\n        target: this.templateSrv.replace(target, null, 'regex')\r\n    };\r\n\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url,\r\n      data: this.buildRequest(\"search\", interpolated ),\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }).then(this.mapToTextValue);\r\n  }\r\n\r\n  mapToTextValue(result) {\r\n    return _.map(result.data, (d, i) => {\r\n      if (d && d.text && d.value) {\r\n        return { text: d.text, value: d.value };\r\n      } else if (_.isObject(d)) {\r\n        return { text: d, value: i};\r\n      }\r\n      return { text: d, value: d };\r\n    });\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    //remove placeholder targets\r\n    var targets = _.filter(options.targets, target => \r\n      target.target !== 'select metric' && !target.hide);\r\n\r\n    targets = _.map(targets, target => \r\n      _.assignIn(target, { target: this.templateSrv.replace(target.target)}));\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n}\r\n"]}